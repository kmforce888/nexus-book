[[install]]
== Installation and Running

[[install-introduction]]
=== Introduction

{pro} is a Java application that requires a Java Runtime Environment. When you run {pro} or {oss}, you are running
a server application with a web-based user interface.  The application itself runs with the Eclipse Jetty servlet
container and Apache Karaf OSGi-container.

Installation is a simple process. This chapter provides further details to get started and keep the repository
manager running successfully in production deployments.

[[install-sect-downloading]]
=== Downloading

{oss} can be downloaded from https://support.sonatype.com/forums/23079216[Sonatype]. Distributions are available for the
64-bit versions for Apple OSX, Microsoft Windows and Unix/Linux. They contain all necessary resources to install and run
the repository manager. You can download a plain archive file or an installer for your operating system of a specific release
version.

The plain archive files are Gzip TAR (TGZ) or ZIP files and are suitable for installation without a graphical user
interface purely using command line-based interaction. The file names include operating system qualifiers and are
similar to similar to:

[subs="attributes"]
----
nexus-{version-exact}-mac.tgz 
nexus-{version-exact}-unix.tar.gz
nexus-{version-exact}-win64.zip
----

The operating system-specific installers can be used for installation in a graphical user interface.  The file
naming includes operating system qualifiers and uses the native extensions for applications:

[subs="attributes"]
----
nexus-{version-exact}-mac.dmg
nexus-{version-exact}-unix.sh
nexus-{version-exact}-win64.exe
----

Next steps, after a successful download, depend on the distribution you downloaded and the operating system and are documented in <<installation-archive>> and <<installation-installer>>.

[[installation-java]]
=== Java Runtime Environment

{pro} requires a Java 8 Runtime Environment (JRE) from Oracle. The distributions for OSX and Windows include
suitable runtime environments for the specific operating system. The distributions for Unix do not include the
runtime environment.

If you prefer to use an external runtime or use a Unix operating system, it is recommended to use the latest 
version of Java 8 available from the http://www.oracle.com/technetwork/java/javase/downloads/index.html[Oracle 
website]. You can choose to install the full JDK or the JRE only.


You can confirm the installed Java version with the `java` command:

----
$  java -version
java version "1.8.0_60"
Java(TM) SE Runtime Environment (build 1.8.0_60-b27)
Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)
----

When multiple JDK or JRE versions are installed, you need to ensure the correct version is configured by running
the above command as the operating system user, that is used to run the repository manager. This allows you to
have a dedicated runtime environment for the repository manager installed that is not on the path and not used by
other installed applications. It allows you to separate upgrades of the Java runtime used by the repository
manager from upgrades of the runtime used by other applications.

TIP: OpenJDK or other Java distributions or older Java versions are not supported.

Potentially you need to update the configuration to specify a specific JDK or JRE installation path:

To set the path for a specific Java location open the +bin/nexus+ script and locate the line
+INSTALL4J_JAVA_HOME_OVERRIDE+. Remove the hash and specify the location of your JDK/JRE:

----
INSTALL4J_JAVA_HOME_OVERRIDE=/usr/lib/jvm/java-8-oracle
---- 

The startup script verifies the runtime environment by checking for the existance of the nested `bin/java` command
as well as major and minor version of the runtime to be the required `1.8`. If the configured runtime is not
suitable, it will proceed with a best effort to locate a suitable runtime configured on the path or via the
`JAVA_HOME` environment variable. If successful, it will start up the repository manager with this JVM.

[[installation-archive]]
===  Installing and Running with the Distribution Archive

The distribution archives combine the application and all required resources in an archive file. Installing and
running {pro} is straightforward. Simply unpack the archive in a directory, to which you have full access.

If you are installing the repository manager on a local workstation to give it a test run, you can install it in
your home directory or wherever you like. {pro} doesn't have any hard-coded directories and will run from any
directory.

You can extract the archive ZIP for Windows with any archiving tool like http://www.7-zip.org/download.html[7zip]
or on the command line with e.g.  

[subs="attributes"]
----
$ 7za.exe e nexus-{version-exact}-win64.zip
----

On Windows you should install the repository manager outside +Program Files+ to avoid problems with Windows file
registry virtualization. If you plan to run the repository manager as a specific user you can install it into the
+AppData\Local+ directory of that users home directory. Otherwise simply use e.g., +C:\nexus+ or something
similar, ensuring that the user running the application has full access.

On OSX or Linux the downloaded GZipâ€™d TAR archive can be extracted with:

[subs="attributes"]
----
$ tar xvzf nexus-{version-exact}-mac.tgz
$ tar xvzf nexus-{version-exact}-unix.tar.gz
----

You install the repository manager in a directory other than your users home directory. On a
Unix machine common practice is to use `/opt`.

The extraction process creates a directory with a number of directories inside. This directory is referred to as
the 'installation directory'.  In contains the application and related resources as well as the 'data directory'
for component and repository storage. Further details about these folders can be found in <<directories>>

The `bin` folder contains the generic startup scripts for Unix-like platforms called `nexus`. The Windows platform
equivalent is called `nexus.exe`. To start the repository manager from the `bin` folder on a Unix-like platform
like Linux use

----
./nexus run
----

The equivalent invocation on Windows requires a `/` in front of the `run` and any other commands.

----
nexus.exe /run
----

Starting the repository manager with the `run` command will leave it running in the current shell and display the
log output.

The repository manager is fully started once you see a message like the following in the log:

[subs="attributes"]
----
Started {pro} {version-exact}
----

In order to shut down the repository manager running via the `run` command, you have to press `CTRL-C`.

The `nexus` script can be used to manage the repository manager as a background application on OSX and Unix with
the `start`, `stop`, `restart`, `force-reload` and `status` commands. The Windows `nexus.exe` command supports
similar commands with a prefix of `/` e.g., `/run`.

Once the repository manager is started you can access the user interface as details in <<access>>.

[[installation-installer]]
===  Installing and Running with the Installer

The installers can be used as an alternative to the distribution archive installation process documented in
<<installation-archive>>.

You can start the installer following these operating system-specific steps:

Windows::  Start the `.exe` by double-clicking on it.

OSX:: Extract the `.dmg` file by double-clicking on the file icon and then start the installer by double-clicking
on the `.app`.

Unix:: Run the `.sh` file in a command line window or double-clicking on it. This starts the installer user
interface. Passing the `-c` option allows you to run the installer purely in the command line window.

TIP: Ensure to run the installer as the user that should be used to run the application as a service. We recommend
usage of a dedicated user account with limited access rights to the host operating system - do not use 'root' or
'administrator'-type users.

The installer guides you through multiple steps to get the repository manager installed:

Welcome:: Press 'Next' after reading the instructions to proceed.

Installation Type:: Select the edition you want to install.

Destination Directory:: Configure the directory into which the application will be installed. The user running the
installer and the user that will run the application have to have full access to the specified directory. Further
details about this 'installation directory' can be found in <<directories>>.

Data Directory:: Configure the directory for all the data stored by the repository manager including
configuration, repository and component data. Further details about this 'data directory' can be found in
<<directories>>.

Options:: Configure 'HTTP', 'JVM' and 'Service'-related aspects. The 'HTTP' configuration allows you to configure
the 'HTTP Port', the 'HTTP Host' and the 'Context Path'. 
+
The port defaults to 8081 and can be set to any available port in your organization. The host defaults to 0.0.0.0,
which means that the repository manager will be available via any IP number assigned to the server. The context
path defaults to the root context, but can be configured to other paths such as `/nexus`.
+
The 'JVM'  configuration includes 'Initial Heap' and 'Maximum Heap' parameters. The 'Select JVM' checkbox allows
you to activate an additional setup step, that will allow you to use a specific JVM installation instead of the
bundled JVM.
+ 
The 'Service' configuration allows you to start the repository manager as part of the installation process. The
installer automatically performs the necessary configuration to run the repository manager as a service on the
target operating system. 

License Agreement::  Read and accept the license agreement with the checkbox and press 'Install' to proceed.

After the extraction of all required assets into the configured directories a last step allows you to create a
desktop icon and open the application. Press 'Finish' to complete the installation.

The two directories created and populated are referred to as the 'installation directory' and the 'data
directory'. More details can be found in <<directories>>.

If you selected to start the application, the repository manager is started to run as a service and your
web-browser is started and the user interface detailed in <<access>> is accessible.

[[installation-docker]]
=== Installing with Docker

{inall}

Docker automates the deployment of applications inside virtualized Linux containers. You can create a container 
that supports the installation of {pro} and {oss}.

To install the repository manager with a Docker image, follow the steps at 
https://hub.docker.com/r/sonatype/nexus3/[Docker Hub].
	
[[installation-upgrading]]
=== Upgrading

Since the repository manager separates its configuration and data storage from the application, it is easy to 
upgrade an existing installation. There are two ways to upgrade: with the installer application or the 
distribution file. 

To keep the upgrade simple schedule downtime to preserve important directories during the process. Follow the 
steps in the support https://support.sonatype.com/hc/en-us/articles/217967608[knowledge base article].

NOTE: Upgrading to {oss} 3.0.0 can only be performed by users who run the milestone 7 release of the repository 
manager. Be sure to manually back up the milestone 7 data directory to another location. It is a crucial step to 
properly upgrade the application.

[[configure-service]]
=== Configuring as a Service

{inall}

When installing {pro} or {oss} for production usage it has to be configured it to run as a service, so it restarts
after the server reboots. It is good practice to run that service or daemon as a specific user that has only the
required access rights.

The <<installation-installer,installer>> automatically configures the service and no further configuration is
necessary.

Installation from the <<installation-archive,distribution archive>> does not include the configuration of a
service. The following sections provide instructions for configuring the service manually. Independent of the
operating system the steps are

- Create operating sytem user with limited access rights dedicated to run the repository manager as a service 
- Ensure suitable Java runtime environment is installed - see <<installation-java>>
- Configure the service and ensure it starts as part of the operating sytem boot process

[[nonrootuser]]
WARNING: We recommend to avoid running the repository manager as the `root` user or a similar privileged user, as
this practice poses serious, unnecessary security risks to the host operating system. Instead we suggest to
follow system administration best practice and use a service specific user with the minimum required access rights
only.

[[service-linux]]
==== Setting up the Service on Linux

You can configure the repository manager to run the +nexus+ script within +etc/init.d+. +etc/init.d+ is a 
standard service management package for Linux, a program that contains a console of start, stop, and restart 
commands. +/etc/init.d+ files are essentially shell scripts that load commands to manage the nexus service, 
triggered by a symlink. On a Linux system perform the operations as the root user are listed below.

Change +NEXUS_HOME+ to the absolute folder location in your +.bashrc+ file, then save.
----
NEXUS_HOME="/opt/nexus"
----

Go to the +bin+ directory, where you will find two files, +nexus+ and +nexus.rc+, that need to be edited.

In the +bin/nexus+ script remove the line below.

----
INSTALL4J_JAVA_PREFIX="su - $run_as_user -c"
----

Replace the entire link with this line:

----
exec su - $run_as_user "$prg_dir/$progname" $@
----

Create a +nexus+ user with sufficient access rights to run the service. In +bin/nexus.rc+ assign the between 
the quotes in the line below.

----
run_as_user="nexus"
----

After changes to the files above, symlink +$NEXUS_HOME/bin/nexus+ to +/etc/init.d/nexus+:

----
sudo ln -s $NEXUS_HOME/bin/nexus /etc/init.d/nexus
----

Make the +/etc/init.d/nexus+ script executable and owned by the root user.
----
chmod 755 /etc/init.d/nexus
chown root /etc/init.d/nexus
----

===== Running as a Service on RedHat and CentOS

This example script uses +chkconfig+ a utility that allows you to specify the runlevel to start the +nexus+
service. Run these commands to activate the service: 

----
cd /etc/init.d
sudo chkconfig --add nexus
sudo chkconfig --levels 345 nexus on
sudo service nexus start
----

The second command adds nexus as a service to be started and stopped with the +service+ command. chkconfig 
manages the symbolic links in +/etc/rc[0-6].d+ which control the services to be started and stopped when the 
operating system restarts or transitions between run-levels. The third command adds nexus to run-levels 3, 4, and 
5. Then the service command starts the repository manager.


===== Runs as a Service on Ubuntu and Debian

For Ubuntu and Debian, the equivalent to the +chkconfig+ tool is +update-rc.d+. Run a default priority to add the +nexus+ service before starting it.

----
cd /etc/init.d
sudo update-rc.d nexus defaults
sudo service nexus start
----

After starting the service for any Linux-based operating systems, verify that the service started successfully.

----
tail -f /opt/nexus/data/log/nexus.log
----

There will be a message notifying you the service is listening for HTTP.

[[service-windows]]
==== Running as a Service on Windows

The startup script that runs {pro} and {oss} on Windows platforms is +bin/nexus.exe+. The script includes standard
commands for starting and stopping the service. It also contains commands +install+ and +uninstall+ to create and
delete the configuration for the service.

You can create the service configuration with:

----
nexus.exe /install
----

The created service is available named 'nexus' in common console application to manage services such as Windows
Services . You can start, stop and restart the service there as well as configure it to start as part of a
operating system startup.

[[service-osx]]
====  Running as a Service on Mac OS X

The standard way to run a service on Mac OS X is to use +launchd+, a program that starts, stops and manages 
daemons and scripts in Apple OS X environments. To run the service you need to create an XML document 
called with the file extension +.plist+ to define its properties. An example plist file for the repository 
manager installed in +/opt+ is shown <<ex-nexus-plist>>.

[[ex-nexus-plist]]
.A sample com.sonatype.nexus.plist file
----
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" 
    "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.sonatype.nexus</string>
    <key>ProgramArguments</key>
    <array>
        <string>/opt/nexus/bin/nexus</string>
        <string>start</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
</dict>
</plist>
----

After saving the file as +com.sonatype.nexus.plist+ in
+/Library/LaunchDaemons/+ you have to change the ownership and access
rights.

----
sudo chown root:wheel /Library/LaunchDaemons/com.sonatype.nexus.plist
sudo chmod 644 /Library/LaunchDaemons/com.sonatype.nexus.plist
----


TIP: Consider setting up a different user to run the repository manager and adapt
permissions and the RUN_AS_USER setting in the +nexus+ startup script.
 
With this setup the repository managers, starts as a service at boot time. To
manually start it after the configuration you can use

----
sudo launchctl load /Library/LaunchDaemons/com.sonatype.nexus.plist
----

[[access]]
=== Accessing the User Interface

Once the repository manager is started, the application is listening on the configured IP address range and
port. By default any IP address and port 8081 are used. To access the web application user interface, fire up a
web browser and type in the URL http://serveripaddress:port[http://serveripaddress:port]
e.g. http://localhost:8081/[http://localhost:8081/]. If the repository manager started up successfully and network
settings allow you to connect to the server, the user interface looks similar to <<fig-nexus-ui-initial>>.

[[fig-nexus-ui-initial]]
.Initial User Interface
image::figs/web/ui-overview-anonymous.png[scale=45]

While the documentation uses +localhost+ throughout, you may need to use the IP Loopback Address of
+127.0.0.1+, the IP address or the DNS hostname assigned to the machine running the repository manager.

The user interface shows the features available to an anonymous user. The repository manager installation includes
an administrative user with full access. Its username is 'admin' and the password is 'admin123'. You can sign in
with the button on the top right corner of the user interface.

Next steps after successfully accessing the user interface are detailed in <<using>>, <<admin>> and following
chapters about various repository formats and tools such as:

* <<maven>>
* <<nuget>>
* <<docker>>
* <<npm>>
* <<bower>>
* <<raw>>

More information about security related topics can be found in <<security>>.

[[directories]]
=== Directories

There are two main directories created and used by the repository manager.

Installation directory:: This directory is contains the Nexus Repository Manager application and all the required
additional components such as Java libraries and configuration file. The name of the directory by default uses
`nexus-` and is appended with the version name. In this documentation it is referred to as `$install-dir` in any
code segments.

Data Directory:: This directory contains all the repositories, components and other data that is being stored and
managed by the repository manager. It is located within the installation directory by default for archive-based
installs and called `data`. The installer allows you to configure the location of this directory. In
this documentation it is referred to as `$data-dir` in any code segments.

[[installation-directory]]
==== Installation Directory

The installation directory includes a number of nested directories:

[subs="attributes"]
----
$ ls -1 nexus-{version-exact} 
LICENSE.txt 
NOTICE.txt 
bin 
data 
deploy 
etc 
lib 
public
system
----

`LICENSE.txt and NOTICE.txt`:: contain legal details about the license and copyright notices.

`bin`::  contains the `nexus` startup script itself as well as startup-related  configuration files.

`data`:: This 'data directory' contains all of the repository and configuration data. By default, from a
distribution archive install, this directory is nested within the installation directory. More details can be
found <<data-directory>>.

//// 
TBD... should this be documented or is it needed or should it be removed from the product
`deploy`:: is empty. 
////

`etc` :: contains configuration files.

`lib` :: contains binary libraries related to Apache Karaf.

`public`:: contains public resources of the  application.

`system`:: contains all components and plugins that constitute the application.


[[data-directory]]
==== Data Directory

The data directory contains subdirectories such as `blobs`, `db`, `elasticsearch` and others. These contain all
the components, repository, configuration and other data presented by the repository manager.

[[configure-runtime]]
=== Configuring the Runtime Environment

Configuring the specifics of the repository manager runtime involves configuration for all components in various
configuration files and startup scripts. This section details these and provides recipes for specific tasks.

The startup of the JVM running the repository manager is managed via files in the `$install-dir/bin` directory
within the installation.  The application startup is performed with the JVM configuration in the file
`$install-dir/bin/nexus.vmoptions` :

----
-Xms1200M
-Xmx1200M
-XX:+UnlockDiagnosticVMOptions
-XX:+UnsyncloadClass
-Djava.net.preferIPv4Stack=true
-Dkaraf.home=.
-Dkaraf.base=.
-Dkaraf.etc=etc
-Djava.util.logging.config.file=etc/java.util.logging.properties
-Dkaraf.data=data
-Djava.io.tmpdir=data/tmp
-Dkaraf.startLocalConsole=false
----

The main location for further configuration files is the `etc` directory within the installation. It numerous
files including specifically:

config.properties:: The main configuration for the Apache Karaf runtime. This file should 'not' be modified.

custom.properties:: Customizable configuration used by Apache Karaf. This file can be used to pass additional 
parameters to the Apache Karaf container.

jetty-*.xml:: A number of configuration files for Eclipse Jetty

org.apache.* and org.ops4j.*:: Various Karaf and OSGi related configuration files.

org.sonatype.nexus.cfg:: Main configuration file for the application allowing you to configure aspects 
such as ports used for HTTP and HTTPS access, location of the data and configuration storage as well as the 
context path and host.

system.properties:: Configuration parameters used for the JVM and application start up.

==== Updating Memory Allocation and other JVM Paramaters

The default and maximum heap sizes for the repository manager are a value of `1200M`, suitable for most usage
patterns. As a Java application running on the JVM the repository manager is using JVM configuration parameters
for numerous settings as part of the startup parameters for the JVM. These values are defined in the configuration
file `$install-dir/bin/nexus.vmoptions`. Increased memory configuration can be set with e.g. :

----
-Xms1500M
-Xmx2G
----

Other JVM parameters such as GC algorithm can be configured in the same location.


==== Changing HTTP Port and Context

The default value for the HTTP port used to access the repository manager user interface and resources is
`8081`. In addition, the root context is used. The user interface is therefore available at
e.g. `http://localhost:8081/`. Port and context are configured in `$install-dir/etc/org.sonatype.nexus.cfg`.  A
suitable configuration to expose the user interface at `http://localhost:9081/components/` is:

----
application-port=9081
nexus-context-path=/components/
----

==== Configuring Data Storage Location

<<installation-archive,Distribution archive installation>> of the repository manager configures the location of
the <<data-directory, data directory>> to be nested inside the application directory. The
<<installation-installer,installers>> allows the user to configure the location of this directory to be any
path. The configuration of this folder is located in `$install-dir/bin/nexus.vmoptions`. For example, if you want
to use the absolute path `/opt/repository/storage/`, you have to change to:

----
-Dkaraf.data=/opt/repository/storage
-Djava.io.tmpdir=/opt/repository/storage/tmp
----

=== Uninstalling

To uninstall the repository manager from your system locate +uninstall+ file in the installation directory. 

Open +uninstall+ to prompt the uninstaller. The interface will ask you if you want to completely remove the 
repository manager and its components. If yes, click 'Next'.

The next step displays the directory of the repository manager. All configurations, components, assets, and 
{oss}-related data will be removed from the directory if you check 'Yes, remove Nexus application data'.

Click 'Next', then 'Finish' to complete the uninstall process.

To uninstall the repository manager from an archive installation, remove the service configuration and 
delete the entire directory.

////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
